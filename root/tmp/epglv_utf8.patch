diff '--color=auto' -uraBN vdr-epg-daemon/epglv/Makefile.alpine vdr-epg-daemon.new/epglv/Makefile.alpine
--- vdr-epg-daemon/epglv/Makefile.alpine	1970-01-01 01:00:00.000000000 +0100
+++ vdr-epg-daemon.new/epglv/Makefile.alpine	2025-04-27 23:02:43.472867967 +0200
@@ -0,0 +1,33 @@
+# Makefile for compiling EPG2VDR Levenshtein UDF without iconv for musl
+
+CC := gcc
+MYSQL_CFLAGS := $(shell mysql_config --cflags)
+MYSQL_LIBS := $(shell mysql_config --libs)
+
+# Use the variables in CFLAGS and LIBS
+CFLAGS  := -O3 -Wall -fPIC -DDEBUG_MYSQL=0 $(MYSQL_CFLAGS)
+LDFLAGS := -shared
+LIBS    := $(MYSQL_LIBS)
+
+SRCDIR  := src
+OBJDIR  := obj
+TARGET  := epglv.so
+
+SRC     := $(wildcard $(SRCDIR)/*.c)
+OBJ     := $(patsubst $(SRCDIR)/%.c,$(OBJDIR)/%.o,$(SRC))
+
+all: $(TARGET)
+
+$(TARGET): $(OBJ)
+	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)
+
+$(OBJDIR)/%.o: $(SRCDIR)/%.c | $(OBJDIR)
+	$(CC) $(CFLAGS) -c $< -o $@
+
+$(OBJDIR):
+	mkdir -p $(OBJDIR)
+
+clean:
+	rm -rf $(OBJDIR) $(TARGET)
+
+.PHONY: all clean
diff '--color=auto' -uraBN vdr-epg-daemon/epglv/src/epglvbase.c vdr-epg-daemon.new/epglv/src/epglvbase.c
--- vdr-epg-daemon/epglv/src/epglvbase.c	2025-04-27 23:28:45.758751510 +0200
+++ vdr-epg-daemon.new/epglv/src/epglvbase.c	2025-04-27 22:43:12.119605387 +0200
@@ -1,9 +1,10 @@
 /*
 
 EPG2VDR Levenshtein Distance UDF for MySQL
-Supports UTF-8 i throught iconv.
+Supports UTF-8.
 
 Copyright (C) 2013 JÃ¶rg Wendel
+Copyright (C) 2024 Google
 
 */
 
@@ -15,28 +16,67 @@
 
 struct workspace_t  // structure to allocate memory in init and use it in core functions
 {
-   char*      str1;          // internal buffer to store 1st string
-   char*      str2;          // internal buffer to store 2nd string
-   int*       row0;          // round buffer for levenshtein_core function
-   int*       row1;          // round buffer for levenshtein_core function
-   int*       row2;          // round buffer for levenshtein_core function
-   mbstate_t* mbstate;       // buffer for mbsnrtowcs
-   iconv_t    ic;            // buffer for iconv
-   char       iconv_init;    // flag indicating if iconv has been inited before
+   int* row0;          // round buffer for levenshtein_core function
+   int* row1;          // round buffer for levenshtein_core function
+   int* row2;          // round buffer for levenshtein_core function
+   // mbstate_t* mbstate;       // Removed mbsnrtowcs dependency
+   // iconv_t    ic;            // Removed iconv dependency
+   // char       iconv_init;    // Removed iconv dependency
 };
 
 //***************************************************************************
-// Function Declarations
+// Helper functions for UTF-8 handling
+//***************************************************************************
+
+// Helper function to get the next UTF-8 code point and its byte length
+uint32_t get_utf8_code_point(const char* s, int* byte_len) {
+    // Basic UTF-8 decoding (handle 1-4 bytes)
+    // Assumes valid UTF-8 for simplicity; real-world might need more robust error handling
+    unsigned char c = (unsigned char)s[0];
+    if (c < 0x80) {
+        *byte_len = 1;
+        return c;
+    } else if ((c & 0xE0) == 0xC0) {
+        if (s[1] == '\0') { *byte_len = 1; return c; } // Handle incomplete sequence
+        *byte_len = 2;
+        return ((uint32_t)(c & 0x1F) << 6) | ((uint32_t)(((unsigned char)s[1]) & 0x3F));
+    } else if ((c & 0xF0) == 0xE0) {
+         if (s[1] == '\0' || s[2] == '\0') { *byte_len = 1; return c; } // Handle incomplete sequence
+        *byte_len = 3;
+        return ((uint32_t)(c & 0x0F) << 12) | ((uint32_t)(((unsigned char)s[1]) & 0x3F) << 6) | ((uint32_t)(((unsigned char)s[2]) & 0x3F));
+    } else if ((c & 0xF8) == 0xF0) {
+        if (s[1] == '\0' || s[2] == '\0' || s[3] == '\0') { *byte_len = 1; return c; } // Handle incomplete sequence
+        *byte_len = 4;
+        return ((uint32_t)(c & 0x07) << 18) | ((uint32_t)(((unsigned char)s[1]) & 0x3F) << 12) | ((uint32_t)(((unsigned char)s[2]) & 0x3F) << 6) | ((uint32_t)(((unsigned char)s[3]) & 0x3F));
+    }
+    *byte_len = 1; // Handle invalid sequence
+    return c; // Return the byte itself for simplicity in case of invalid UTF-8
+}
+
+// Helper function to get the number of UTF-8 code points in a string
+int get_utf8_char_count(const char* s, int byte_len) {
+    int count = 0;
+    int i = 0;
+    while (i < byte_len) {
+        int byte_len_char;
+        get_utf8_code_point(s + i, &byte_len_char);
+        i += byte_len_char;
+        count++;
+    }
+    return count;
+}
+
+
+//***************************************************************************
+// Function Declarations (removed epglv_utf8toiso)
 //***************************************************************************
 
 int epglv_core(struct workspace_t *ws,
-               const char *str1, int len1,
-               const char *str2, int len2,
+               const char *str1_bytes, int len1_chars,
+               const char *str2_bytes, int len2_chars,
+               const char *s1_bytes_full, const char *s2_bytes_full, // Pass full byte strings for code point access
                int w, int s, int a, int d, int limit);
 
-char* epglv_utf8toiso(const char *str_src, long long *len_src,
-                      struct workspace_t * ws, char *str_dst, int limit);
-
 //***************************************************************************
 // The Work
 //***************************************************************************
@@ -61,29 +101,31 @@
     // attempt to allocate memory in which to calculate distance
 
     ws = (struct workspace_t*)malloc(sizeof(struct workspace_t));
-    ws->mbstate = (mbstate_t*)malloc(sizeof(mbstate_t));
-    ws->str1 = (char*)malloc(sizeof(char)*(LENGTH_MAX+2));    // max allocated for UTF-8 complex string
-    ws->str2 = (char*)malloc(sizeof(char)*(LENGTH_MAX+2));
+    // No need for mbstate or iconv related allocations
+
+    // Allocate rows based on LENGTH_MAX (maximum byte length), which is sufficient for character count
     ws->row0 = (int*)malloc(sizeof(int)*(LENGTH_MAX+2));
     ws->row1 = (int*)malloc(sizeof(int)*(LENGTH_MAX+2));
     ws->row2 = (int*)malloc(sizeof(int)*(LENGTH_MAX+2));
-    ws->iconv_init = 0;
 
-    if (!ws || !ws->mbstate || !ws->str1 || !ws->str2 || !ws->row0 || !ws->row1 || !ws->row2)
+
+    if (!ws || !ws->row0 || !ws->row1 || !ws->row2)
     {
         free(ws->row2); free(ws->row1); free(ws->row0);
-        free(ws->str2); free(ws->str1);
-        free(ws->mbstate); free(ws);
+        free(ws);
         strncpy(message, "EPGLV() failed to allocate memory", 80);
         return 1;
     }
 
+    // setlocale might not be needed for pure UTF-8 processing, but keeping it for now.
+    // If issues arise, this might be a candidate for removal or change.
     if (!setlocale(LC_CTYPE, "de_DE.UTF-8"))
     {
         free(ws->row2); free(ws->row1); free(ws->row0);
-        free(ws->str2); free(ws->str1);
-        free(ws->mbstate); free(ws);
+        free(ws);
         strncpy(message, "EPGLV() failed to change locale", 80);
+        // This might not be a fatal error for pure UTF-8, but the original code treated it as such.
+        // Depending on requirements, this could be changed to a warning.
         return 1;
     }
 
@@ -103,15 +146,13 @@
    {
       struct workspace_t* ws = (struct workspace_t*)init->ptr;
 
-      if (ws->iconv_init)
-         iconv_close(ws->ic);
+      // No iconv_close needed
+      // No free for mbstate
 
       free(ws->row2);
       free(ws->row1);
       free(ws->row0);
-      free(ws->str2);
-      free(ws->str1);
-      free(ws->mbstate);
+      // No free for str1 and str2 as they are not allocated in workspace anymore
       free(ws);
    }
 
@@ -123,90 +164,144 @@
 //***************************************************************************
 
 long long base_epglv(UDF_INIT* init, UDF_ARGS* args, char* is_null, char* error,
-                     long long* len1, long long* len2)
+                     long long* len1_bytes_out, long long* len2_bytes_out)
 {
-   const char* str1 = args->args[0];
-   const char* str2 = args->args[1];
+   const char* str1_bytes = args->args[0];
+   const char* str2_bytes = args->args[1];
 
-   char* iso_str1 = 0;
-   char* iso_str2 = 0;
    struct workspace_t* ws = (struct workspace_t*)init->ptr;  // get a pointer to memory previously allocated
 
    *error = 0;
-   *len1 = (!str1) ? 0 : args->lengths[0];
-   *len2 = (!str2) ? 0 : args->lengths[1];
-   long long max = *len1 > *len2 ? *len1 : *len2;
+   long long len1_bytes = (!str1_bytes) ? 0 : args->lengths[0];
+   long long len2_bytes = (!str2_bytes) ? 0 : args->lengths[1];
+   long long max_bytes = len1_bytes > len2_bytes ? len1_bytes : len2_bytes;
 
-   if (max >= LENGTH_MAX)
+   if (max_bytes >= LENGTH_MAX)
    {
-      print("size(%lld) was bigger than %d, aborting", max, LENGTH_MAX);
-      return -1;
+      print("size(%lld) was bigger than %d, aborting", max_bytes, LENGTH_MAX);
+      return -1; // Or handle this case as needed, maybe return max_bytes distance?
    }
 
-   if (!*len1 && !*len2)
+   if (!len1_bytes && !len2_bytes) {
+      *len1_bytes_out = 0;
+      *len2_bytes_out = 0;
       return 0;
+   }
+
+   // Calculate character counts
+   int len1_chars = get_utf8_char_count(str1_bytes, len1_bytes);
+   int len2_chars = get_utf8_char_count(str2_bytes, len2_bytes);
 
-   if (!*len1 || !*len2)
-      return max;
+   *len1_bytes_out = len1_bytes; // Return original byte lengths as before if needed by caller
+   *len2_bytes_out = len2_bytes;
 
-   if ((iso_str1 = epglv_utf8toiso(str1, len1, ws, ws->str1, max)) == 0)
-      return -1;
+   if (!len1_chars || !len2_chars)
+      return len1_chars > len2_chars ? len1_chars : len2_chars; // Distance is the length of the longer string if one is empty
 
-   if ((iso_str2 = epglv_utf8toiso(str2, len2, ws, ws->str2, max)) == 0)
-      return -1;
 
    return epglv_core(
       ws,
-      iso_str1, *len1,
-      iso_str2, *len2,
+      str1_bytes, len1_chars, // Pass byte strings and character counts
+      str2_bytes, len2_chars,
+      str1_bytes, str2_bytes, // Pass full byte strings for code point access in core
       /* swap */         1,
       /* substitution */ 1,
       /* insertion */    1,
       /* deletion */     1,
-      /* limit */        max);
+      /* limit */        max_bytes); // Limit might need adjustment if it was based on byte length for ISO
 }
 
 //***************************************************************************
-// core function
+// core function - Modified to handle UTF-8
 //***************************************************************************
 
 int epglv_core(struct workspace_t* ws,
-                const char* str1, int len1,
-                const char* str2, int len2,
-                int w, int s, int a, int d, int limit)
+                const char* str1_bytes, int len1_chars,
+                const char* str2_bytes, int len2_chars,
+                const char *s1_bytes_full, const char *s2_bytes_full, // Use different names to avoid shadowing
+                int w, int s, int a, int d, int limit) // Limit based on bytes, not chars? Assuming original limit was byte based.
 {
     int* row0 = ws->row0;
     int* row1 = ws->row1;
     int* row2 = ws->row2;
     int i, j;
 
-    for (j = 0; j <= len2; j++)
+    // Initialize the first row
+    for (j = 0; j <= len2_chars; j++)
         row1[j] = j * a;
 
-    for (i = 0; i < len1; i++)
+    int byte_idx1 = 0; // Byte index for s1_bytes_full
+
+    for (i = 0; i < len1_chars; i++)
     {
        int* dummy;
+       int byte_len1_char;
+       uint32_t code_point1 = get_utf8_code_point(s1_bytes_full + byte_idx1, &byte_len1_char);
 
        row2[0] = (i + 1) * d;
 
-       for (j = 0; j < len2; j++)
+       int byte_idx2 = 0; // Byte index for s2_bytes_full
+
+       for (j = 0; j < len2_chars; j++)
        {
+          int byte_len2_char;
+          uint32_t code_point2 = get_utf8_code_point(s2_bytes_full + byte_idx2, &byte_len2_char);
+
           // substitution
+          row2[j + 1] = row1[j] + s * (code_point1 != code_point2);
 
-          row2[j + 1] = row1[j] + s * (str1[i] != str2[j]);
+          // swap (needs careful handling of byte indices to get previous characters)
+          uint32_t code_point1_prev = 0, code_point2_prev = 0;
+          int temp_byte_len;
+
+          // Get previous code point for str1
+          if (i > 0) {
+             int temp_byte_idx1_prev = byte_idx1 - byte_len1_char; // Start from the beginning and find the byte index of the previous char
+             int current_char_count_s1 = 0;
+             int k=0;
+             while(k < byte_idx1){
+                 int blen;
+                 get_utf8_code_point(s1_bytes_full + k, &blen);
+                 if(current_char_count_s1 == i -1){
+                     temp_byte_idx1_prev = k;
+                     break;
+                 }
+                 k += blen;
+                 current_char_count_s1++;
+             }
+             code_point1_prev = get_utf8_code_point(s1_bytes_full + temp_byte_idx1_prev, &temp_byte_len);
+          }
+
+           // Get previous code point for str2
+           if (j > 0) {
+              int temp_byte_idx2_prev = 0;
+               // Find the byte index of the previous character in s2
+               int current_char_count_s2 = 0;
+               int k=0;
+               while(k < byte_idx2){
+                   int blen;
+                   get_utf8_code_point(s2_bytes_full + k, &blen);
+                   if(current_char_count_s2 == j -1){
+                       temp_byte_idx2_prev = k;
+                       break;
+                   }
+                   k += blen;
+                   current_char_count_s2++;
+               }
+               code_point2_prev = get_utf8_code_point(s2_bytes_full + temp_byte_idx2_prev, &temp_byte_len);
+           }
 
-          // swap
 
           if (i > 0 && j > 0 &&
-              str1[i - 1] == str2[j] &&
-              str1[i] == str2[j - 1] &&
+              code_point1_prev == code_point2 && // compare char at i-1 of s1 with char at j of s2
+              code_point1 == code_point2_prev && // compare char at i of s1 with char at j-1 of s2
               row2[j + 1] > row0[j - 1] + w)
           {
              row2[j + 1] = row0[j - 1] + w;
           }
 
-          // deletion
 
+          // deletion
           if (row2[j + 1] > row1[j + 1] + d)
              row2[j + 1] = row1[j + 1] + d;
 
@@ -211,86 +306,21 @@
              row2[j + 1] = row1[j + 1] + d;
 
           // insertion
-
           if (row2[j + 1] > row2[j] + a)
              row2[j + 1] = row2[j] + a;
+
+          byte_idx2 += byte_len2_char; // Advance byte index for s2_bytes_full
        }
 
        dummy = row0;
        row0 = row1;
        row1 = row2;
        row2 = dummy;
-    }
-
-    debug_print("returning(%d)", row1[len2]);
-
-    return row1[len2];
-}
-
-//**************************************************************************
-// translates an UTF8 string to ISO with some error return codes
-//**************************************************************************
-
-char* epglv_utf8toiso(const char* str_src, long long* len_src,
-                      struct workspace_t* ws, char* str_dst, int limit)
-{
-   mbstate_t* mbstate = ws->mbstate;
-   size_t len_mbsnrtowcs, len_ret = LENGTH_MAX, len_min = LENGTH_MAX;
-   char* ret = str_dst;
-   char* in_s = (char*)str_src;
-
-   memset((void*)mbstate, '\0', sizeof(mbstate_t));
-
-   if ((len_mbsnrtowcs = mbsnrtowcs(0, &str_src, *len_src, 0, mbstate)) == -1)
-   {
-      print("mbsnrtowcs failed, str_src(%s): '%m'", str_src);
-      strncpy(str_dst, str_src, len_min);
-      str_dst[len_min] = 0; str_dst[len_min + 1] = 0;
-      *len_src = len_min;
-      return str_dst;
-   }
-
-   len_min = MIN(len_mbsnrtowcs, limit);
 
-   if (len_mbsnrtowcs == *len_src)
-   {
-      strncpy(str_dst, str_src, len_min);
-      str_dst[len_min] = 0; str_dst[len_min + 1] = 0;
-      *len_src = len_min;
-      return str_dst;
-   }
-
-   if (!ws->iconv_init)
-   {
-      if ((ws->ic = iconv_open("ISO8859-15//TRANSLIT", "UTF-8")) == (iconv_t)-1)
-      {
-         print("%s", "failed to initialize iconv '%m'");
-         return 0;
-      }
-
-      ws->iconv_init = 1;
-   }
-
-   if (iconv(ws->ic, &in_s, (size_t*)len_src, &ret, &len_ret) == -1)
-   {
-      if (errno != E2BIG)
-      {
-         print("in_s '%.*s' at '%.*s'; len_src (%lld) len_ret (%zu) '%m'",
-               (int)*len_src, str_src, (int)*len_src, in_s, *len_src, len_ret);
-         strncpy(str_dst, str_src, len_min);
-         str_dst[len_min] = 0; str_dst[len_min + 1] = 0;
-         *len_src = len_min;
-         return str_dst;
-      }
-
-      print("inside E2BIG len_mbsnrtowcs(%zu) len_src(%lld)", len_mbsnrtowcs, *len_src);
-      len_mbsnrtowcs = len_min;
-   }
-
-   *len_src = len_min;           // adjust converted length
-   str_dst[len_min] = 0; str_dst[len_min + 1] = 0;
+       byte_idx1 += byte_len1_char; // Advance byte index for s1_bytes_full
+    }
 
-   iconv(ws->ic, 0, 0, 0, 0);
+    debug_print("returning(%d)", row1[len2_chars]); // Use character count for the final result index
 
-   return str_dst;
+    return row1[len2_chars];
 }
diff '--color=auto' -uraBN vdr-epg-daemon/epglv/src/epglv.h vdr-epg-daemon.new/epglv/src/epglv.h
--- vdr-epg-daemon/epglv/src/epglv.h	2025-04-27 23:28:45.758751510 +0200
+++ vdr-epg-daemon.new/epglv/src/epglv.h	2025-04-27 22:56:58.179351919 +0200
@@ -1,9 +1,10 @@
 /*
 
 EPG2VDR Levenshtein Distance UDF for MySQL
-Supports UTF-8 throught iconv.
+Supports UTF-8.
 
 Copyright (C) 2013 JÃ¶rg Wendel
+Copyright (C) 2024 Google
 
 */
 
@@ -19,15 +20,20 @@
 #include <locale.h>
 #include <stdio.h>
 #include <string.h>
-#include <wchar.h>
+#include <wchar.h> // Keep wchar.h for size_t for now, although mbsnrtowcs is removed
 #include <stdlib.h>
 #include <stdarg.h>
-#include <iconv.h>
+// #include <iconv.h> // Removed iconv dependency
 #include <errno.h>
 #include <stdint.h>
 #include <assert.h>
 
-#define LENGTH_MAX 1000
+// Define DEBUG_MYSQL if not already defined by compiler flags
+#ifndef DEBUG_MYSQL
+#define DEBUG_MYSQL 0
+#endif
+
+#define LENGTH_MAX 1000 // This is assumed to be the maximum byte length of input strings
 
 #define debug_print(fmt, ...) \
     do { if (DEBUG_MYSQL) fprintf(stderr, "%s():%d> " fmt "\n", \
